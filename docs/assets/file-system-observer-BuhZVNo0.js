import{d as F,o,a,u as c,M as h,s as H,b as S}from"./index-CcY2qFLA.js";import{readDirectory as w,checkAndPossiblyAskForPermissions as C}from"./file-system-qcgkIhlt.js";const f=new Set;let s=null;const D=async n=>{console.log(`File system changes detected  → ${n.map(t=>`${t.changedHandle.name} (${t.type})`).join(", ")}`.trim());let e=[];for(const t of n)if(t.type==="modified"||t.type==="unsupported"){if(t.changedHandle instanceof FileSystemFileHandle){const r=await t.changedHandle.getFile();console.log(`File ${r.name} modified → Re-optimizing`),r.handle=t.changedHandle,e.push(r)}else if(t.changedHandle instanceof FileSystemDirectoryHandle){const r=t.changedHandle;let l=await w(r,!0);console.log(`Directory ${t.changedHandle.name} modified → Getting entries`),l=l.filter(i=>i.type==="application/wasm"||i.name.endsWith(".wasm")||i.name.endsWith(".wat")),e.push(...l);const d=Array.from(c.keys()),u=Array.from(c.values()).map(i=>i.file.lastModified),b=e.map(async i=>H?await i.handle.getUniqueId():i.webkitRelativePath?i.webkitRelativePath:i.relativePath?i.relativePath:i.name),v=await Promise.all(b);e=e.filter((i,y)=>{const g=v[y],p=!d.includes(g),k=u[d.indexOf(g)]<i.lastModified;return p||k})}}e=[...new Set(e)],await C(e),await S(e)},m=()=>(s||(s=new FileSystemObserver(F(n=>{D(n)},250))),s);localStorage.getItem("observe-file-changes")!=="true"?o.checked=!1:o.checked=!0;localStorage.getItem("observe-directory-changes")!=="true"?a.checked=!1:a.checked=!0;o.parentNode.hidden=!1;o.addEventListener("change",()=>{if(localStorage.setItem("observe-file-changes",o.checked),o.checked){m();for(const[n,{handle:e}]of c.entries())n===h||!e||(s.observe(e),console.log(`File ${e.name} → Observing changes`));return}if(s)for(const[n,{handle:e}]of c.entries())n===h||!e||(s.unobserve(e),console.log(`File ${e.name} → No longer observing changes`))});a.parentNode.hidden=!1;a.addEventListener("change",()=>{if(localStorage.setItem("observe-directory-changes",a.checked),a.checked){m();for(const n of f)s.observe(n),console.log(`Directory ${n.name} → Observing changes`);return}if(s)for(const n of f)s.unobserve(n),console.log(`Directory ${n.name} → No longer observing changes`)});export{m as getFileSystemChangeObserver,f as observedDirectories};
